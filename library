-- EclipseUILibrary.lua
-- Modular, reusable UI library matching your Eclipse GUI reference
-- Supports: Sidebar, Tabs, Cards, Buttons, Toggles, Sliders, Dropdowns, Textboxes, Keybinds, Labels

local EclipseUILibrary = {}
EclipseUILibrary.__index = EclipseUILibrary

local function create(class, props)
    local inst = Instance.new(class)
    for k, v in pairs(props) do
        inst[k] = v
    end
    return inst
end

local sidebarButtons = {
    {Name = "Aimbot", Icon = "rbxassetid://114890619448076"},
    {Name = "Reach", Icon = "rbxassetid://110655544111595"},
    {Name = "Movement", Icon = "rbxassetid://89157912594378"},
    {Name = "Automation", Icon = "rbxassetid://125270223171482"},
    {Name = "OOB", Icon = "rbxassetid://80444649346887"},
    {Name = "Anti-System", Icon = "rbxassetid://114890619448076"},
    {Name = "Community", Icon = "rbxassetid://101752413421565"},
    {Name = "Settings", Icon = "rbxassetid://85911450793750"},
}

local function makeCard(parent, cardTitle)
    local card = create("Frame", {
        Parent = parent,
        BackgroundColor3 = Color3.fromRGB(17, 17, 17),
        Size = UDim2.new(0.95, 0, 0.35, 0),
        Position = UDim2.new(0.025, 0, 0.05, 0)
    })
    create("UICorner", {Parent = card, CornerRadius = UDim.new(0, 14)})
    create("TextLabel", {
        Parent = card,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0.18, 0),
        Font = Enum.Font.FredokaOne,
        Text = cardTitle,
        TextColor3 = Color3.fromRGB(132, 132, 132),
        TextScaled = true
    })
    local y = 0.20
    local function addElement(element)
        element.Position = UDim2.new(0.05, 0, y, 0)
        y = y + element.Size.Y.Scale + 0.02
    end
    return {
        AddLabel = function(text)
            local label = create("TextLabel", {
                Parent = card,
                BackgroundTransparency = 1,
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text,
                TextColor3 = Color3.fromRGB(132, 132, 132),
                TextScaled = true
            })
            addElement(label)
            return label
        end,
        AddButton = function(text, callback)
            local btn = create("TextButton", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(255, 80, 80),
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true
            })
            btn.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)
            addElement(btn)
            return btn
        end,
        AddToggle = function(text, callback)
            local state = false
            local toggle = create("TextButton", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(255, 80, 80),
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text .. ": Off",
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true
            })
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = text .. ": " .. (state and "On" or "Off")
                if callback then callback(state) end
            end)
            addElement(toggle)
            return toggle
        end,
        AddSlider = function(text, min, max, callback)
            local sliderLabel = create("TextLabel", {
                Parent = card,
                BackgroundTransparency = 1,
                Size = UDim2.new(0.6, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text .. ": " .. tostring(min),
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true
            })
            local slider = create("TextButton", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(255, 80, 80),
                Position = UDim2.new(0.7, 0, y, 0),
                Size = UDim2.new(0.25, 0, 0.10, 0),
                Text = "",
            })
            local value = min
            slider.MouseButton1Click:Connect(function()
                value = value + 1
                if value > max then value = min end
                sliderLabel.Text = text .. ": " .. tostring(value)
                if callback then callback(value) end
            end)
            addElement(sliderLabel)
            addElement(slider)
            return slider
        end,
        AddDropdown = function(text, list, callback)
            local dropdown = create("TextButton", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(53, 53, 53),
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text .. ": " .. tostring(list[1]),
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            local current = list[1]
            dropdown.MouseButton1Click:Connect(function()
                local idx = table.find(list, current) or 1
                idx = idx + 1
                if idx > #list then idx = 1 end
                current = list[idx]
                dropdown.Text = text .. ": " .. tostring(current)
                if callback then callback(current) end
            end)
            addElement(dropdown)
            return dropdown
        end,
        AddTextbox = function(placeholder, callback)
            local textbox = create("TextBox", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(29, 29, 29),
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = "",
                PlaceholderText = placeholder,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true
            })
            textbox.FocusLost:Connect(function(enter)
                if enter and callback then callback(textbox.Text) end
            end)
            addElement(textbox)
            return textbox
        end,
        AddKeybind = function(text, key, callback)
            local keybind = create("TextButton", {
                Parent = card,
                BackgroundColor3 = Color3.fromRGB(255, 80, 80),
                Size = UDim2.new(0.9, 0, 0.10, 0),
                Font = Enum.Font.FredokaOne,
                Text = text .. ": " .. tostring(key.Name),
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextScaled = true
            })
            local UserInputService = game:GetService("UserInputService")
            UserInputService.InputBegan:Connect(function(input, gpe)
                if not gpe and input.KeyCode == key then
                    if callback then callback() end
                end
            end)
            addElement(keybind)
            return keybind
        end
    }
end

function EclipseUILibrary.CreateWindow(title)
    local self = setmetatable({}, EclipseUILibrary)

    -- Main GUI
    local gui = create("ScreenGui", {
        Name = "EclipseGUI",
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    -- Main Frame
    local mainFrame = create("Frame", {
        Name = "MainFrame",
        Parent = gui,
        BackgroundColor3 = Color3.fromRGB(7, 7, 7),
        BorderSizePixel = 0,
        Position = UDim2.new(0.1, 0, 0.1, 0),
        Size = UDim2.new(0.8, 0, 0.8, 0)
    })
    create("UICorner", {Parent = mainFrame, CornerRadius = UDim.new(0, 14)})

    -- Header
    create("TextLabel", {
        Name = "TextLabel-Header",
        Parent = mainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.02, 0, 0.01, 0),
        Size = UDim2.new(0.3, 0, 0.06, 0),
        Font = Enum.Font.FredokaOne,
        Text = title or "Eclipse Hub | Version: 1.35",
        TextColor3 = Color3.fromRGB(255, 80, 80),
        TextScaled = true,
        TextWrapped = true
    })

    -- Sidebar
    local sidebar = create("Frame", {
        Name = "Sidebar",
        Parent = mainFrame,
        BackgroundColor3 = Color3.fromRGB(10, 10, 10),
        Size = UDim2.new(0.18, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0)
    })
    create("UICorner", {Parent = sidebar, CornerRadius = UDim.new(0, 14)})

    -- Tab system
    local tabs = {}
    local currentTab = nil

    function self:AddTab(tabName)
        local tab = {}
        tab.Name = tabName
        tab.Content = create("Frame", {
            Parent = mainFrame,
            BackgroundTransparency = 1,
            Size = UDim2.new(0.8, 0, 1, 0),
            Position = UDim2.new(0.18, 0, 0, 0),
            Visible = false
        })

        -- Sidebar button
        local btn = create("TextButton", {
            Parent = sidebar,
            BackgroundColor3 = Color3.fromRGB(17, 17, 17),
            Size = UDim2.new(0.9, 0, 0.08, 0),
            Position = UDim2.new(0.05, 0, 0.05 + (#tabs)*0.1, 0),
            Font = Enum.Font.FredokaOne,
            Text = "  " .. tabName,
            TextColor3 = Color3.fromRGB(255, 80, 80),
            TextScaled = true,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        create("UICorner", {Parent = btn, CornerRadius = UDim.new(0, 14)})

        -- Icon (optional)
        for _, info in ipairs(sidebarButtons) do
            if info.Name == tabName then
                create("ImageLabel", {
                    Parent = btn,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.15, 0, 0.7, 0),
                    Position = UDim2.new(0.01, 0, 0.15, 0),
                    Image = info.Icon
                })
            end
        end

        btn.MouseButton1Click:Connect(function()
            if currentTab then currentTab.Content.Visible = false end
            tab.Content.Visible = true
            currentTab = tab
        end)

        table.insert(tabs, tab)
        if #tabs == 1 then
            tab.Content.Visible = true
            currentTab = tab
        end

        -- Card section API
        function tab:AddCard(cardTitle)
            return makeCard(tab.Content, cardTitle)
        end

        return tab
    end

    self.AddTab = self.AddTab
    self.Gui = gui
    self.MainFrame = mainFrame
    self.Sidebar = sidebar
    self.Tabs = tabs
    return self
end

return EclipseUILibrary
